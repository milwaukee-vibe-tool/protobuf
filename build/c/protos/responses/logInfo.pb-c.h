/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: protos/responses/logInfo.proto */

#ifndef PROTOBUF_C_protos_2fresponses_2flogInfo_2eproto__INCLUDED
#define PROTOBUF_C_protos_2fresponses_2flogInfo_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct LogInfo LogInfo;
typedef struct DataPoint DataPoint;


/* --- enums --- */


/* --- messages --- */

struct  LogInfo
{
  ProtobufCMessage base;
  char *log_id;
  uint32_t sample_rate;
  uint32_t offset;
  uint32_t count;
  uint32_t total;
  size_t n_points;
  DataPoint **points;
};
#define LOG_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&log_info__descriptor) \
    , (char *)protobuf_c_empty_string, 0, 0, 0, 0, 0,NULL }


struct  DataPoint
{
  ProtobufCMessage base;
  uint32_t value;
};
#define DATA_POINT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&data_point__descriptor) \
    , 0 }


/* LogInfo methods */
void   log_info__init
                     (LogInfo         *message);
size_t log_info__get_packed_size
                     (const LogInfo   *message);
size_t log_info__pack
                     (const LogInfo   *message,
                      uint8_t             *out);
size_t log_info__pack_to_buffer
                     (const LogInfo   *message,
                      ProtobufCBuffer     *buffer);
LogInfo *
       log_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   log_info__free_unpacked
                     (LogInfo *message,
                      ProtobufCAllocator *allocator);
/* DataPoint methods */
void   data_point__init
                     (DataPoint         *message);
size_t data_point__get_packed_size
                     (const DataPoint   *message);
size_t data_point__pack
                     (const DataPoint   *message,
                      uint8_t             *out);
size_t data_point__pack_to_buffer
                     (const DataPoint   *message,
                      ProtobufCBuffer     *buffer);
DataPoint *
       data_point__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   data_point__free_unpacked
                     (DataPoint *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*LogInfo_Closure)
                 (const LogInfo *message,
                  void *closure_data);
typedef void (*DataPoint_Closure)
                 (const DataPoint *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor log_info__descriptor;
extern const ProtobufCMessageDescriptor data_point__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_protos_2fresponses_2flogInfo_2eproto__INCLUDED */
